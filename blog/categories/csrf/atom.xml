<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSRF | Everything on Information Security]]></title>
  <link href="http://infosecly.com/blog/categories/csrf/atom.xml" rel="self"/>
  <link href="http://infosecly.com/"/>
  <updated>2013-05-24T22:46:43+08:00</updated>
  <id>http://infosecly.com/</id>
  <author>
    <name><![CDATA[infosecly]]></name>
    <email><![CDATA[infosecly@gmail.com]]></email>
  </author>
  <generator uri="http://infosecly.com/">InfoSecly Blog</generator>

  
  <entry>
    <title type="html"><![CDATA[Django Security Checklist]]></title>
    <link href="http://infosecly.com/2013/05/19/django-security-checklist/"/>
    <updated>2013-05-19T18:38:00+08:00</updated>
    <id>http://infosecly.com/2013/05/19/django-security-checklist</id>
    <content type="html"><![CDATA[<p>People tend to finish a project as quickly as possible and deploy in production environment, sometimes forgetting about security aspect of it. Let&rsquo;s assume you have already spent a good amount of time for developing, testing and deploying into production. After a few days, you got hacked because you forgot to enable a basic security setting. Thus, you should always spend some time to review your configurations and settings from security perspective.</p>

<p>I know most of us are very busy and don&rsquo;t have time to check all of those settings, so this is where a basic security checklist becomes a handy. This post mainly addresses major security concerns with respect to <a href="http://djangoframework.com">Django framework</a> and lists down the common security settings specific to Django.</p>

<p>You don&rsquo;t have to set all of these settings, but it&rsquo;s strongly recommended.</p>

<p><strong>Django security checklist:</strong></p>

<ol>
<li><strong>Secret Key:</strong>
Set your secret key to a big random unique value and keep it always secret.  Do not hardcode it, source it from the environment variables. <!--more--></li>
<li><strong>Database passwords:</strong>
Follow point #1 for Database passwords.</li>
<li><strong>Debug Mode:</strong>
You must never enable DEBUG in production environment. <code>DEBUG = False</code></li>
<li><p><strong>Use HTTPS</strong>:
Always use site-wide HTTPS (if possible) and route HTTP traffic to HTTPS. Assuming you have enabled HTTPS, set the following in <code>settings.py</code>:</p>

<ul>
<li><p><code>SESSION_COOKIE_SECURE = True</code> &ndash; To transfer session cookies only from HTTPS</p></li>
<li><p><code>CSRF_COOKIE_SECURE = True</code> &ndash; To avoid <a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery" >CSRF cookie</a> transfers over HTTP. More on CSRF protection in Django can be found here <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/">here</a>.</p></li>
<li><code>SESSION_EXPIRE_AT_BROWSER_CLOSE = True</code> &ndash; This is recommended, but not must. If you set this variable to True, it will force the users to login every time they re-open the browser. This setting may not work for some users who use browser&rsquo;s <strong><em>&ldquo;continue to work after re-open&rdquo;</em></strong> type of settings.  Keep in mind, one browser can be used by different people, so it&rsquo;s up to you to choose between more comfortable or secure user experience.</li>
</ul>
</li>
<li><strong>Python code in root directory:</strong>
Don&rsquo;t put any Python code in your Webserver&rsquo;s root directory so that you won&rsquo;t serve your code as a plain text (unless it&rsquo;s an open source).</li>
<li><strong>File upload size:</strong>
Set a reasonable file size limit if you serve user file uploads. This will help to hinder DoS attacks.</li>
<li><strong>Restricted Access:</strong>
Don&rsquo;t forget to put <code>@login_required</code> decorator wherever you require the restricted access, be it entire views or specific actions.</li>
<li><strong>Raw SQL:</strong>
Don&rsquo;t bypass Django&rsquo;s ORM layer to avoid SQL injection. Don&rsquo;t use raw SQL queries like <code>raw()</code> and don&rsquo;t execute custom SQL directly.</li>
<li><strong>Quote attributes:</strong>
Quote all attributes in your HTMLs where dynamic data is inserted. For instance,<code>&lt;img... alt=variable...&gt;</code> is not good, but <code>&lt;img... alt="variable"...&gt;</code> is. This will help you to avoid XSS attack.</li>
<li><strong>Security updates:</strong>
Keep track of Django and Python core team blogs for the latest security updates.
Also, checkout <a href="http://django-secure.readthedocs.org/en/latest/index.html">django-secure</a> to help you with basic Django security steps.</li>
</ol>


<p><strong>Please let me know if you have anything to add, would be glad to update the post.</strong></p>
]]></content>
  </entry>
  
</feed>
